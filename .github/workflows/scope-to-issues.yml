name: Scope to Issues

on:
  workflow_dispatch:
    inputs:
      scope_json:
        description: 'JSON scope from Claude Code /scope command'
        required: true
        type: string
  repository_dispatch:
    types: [accept-scope]

jobs:
  create-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Ensure status labels exist
        uses: actions/github-script@v6
        with:
          script: |
            const labels = [
              { name: 'status:backlog', color: 'E4E669', description: 'Issue is in backlog' },
              { name: 'status:todo', color: 'FEF2C0', description: 'Ready to start work' },
              { name: 'status:in-progress', color: '3F83F8', description: 'Work in progress' },
              { name: 'status:review', color: 'FBCA04', description: 'In review' },
              { name: 'status:blocked', color: 'D73A4A', description: 'Blocked by dependency' },
              { name: 'status:done', color: '0E8A16', description: 'Completed' }
            ];
            
            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name
                });
                console.log(`Label ${label.name} already exists`);
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                  console.log(`Created label ${label.name}`);
                }
              }
            }
      
      - name: Parse scope and create issues
        uses: actions/github-script@v6
        with:
          script: |
            const scope = JSON.parse('${{ github.event.inputs.scope_json || github.event.client_payload.scope_json }}');
            const issues = [];
            
            // Map estimate sizes to points
            const estimateToPoints = {
              'S': 3,
              'M': 5,
              'L': 8,
              'XL': 13
            };
            
            for (const slice of scope.slices) {
              // Build the issue body with available fields
              let body = `## Vertical Slice: ${slice.title}\n\n`;
              body += `${slice.summary}\n\n`;
              
              if (slice.acceptance_criteria && slice.acceptance_criteria.length > 0) {
                body += `### Acceptance Criteria\n${slice.acceptance_criteria.map(ac => `- [ ] ${ac}`).join('\n')}\n\n`;
              }
              
              if (slice.dependencies && slice.dependencies.length > 0) {
                body += `### Dependencies\n${slice.dependencies.map(dep => `- ${dep}`).join('\n')}\n\n`;
              }
              
              if (slice.files_touched && slice.files_touched.length > 0) {
                body += `### Files to be Modified\n${slice.files_touched.map(f => `- \`${f}\``).join('\n')}\n\n`;
              }
              
              body += `### Technical Details\n`;
              body += `- **Estimate**: ${slice.estimate} (${estimateToPoints[slice.estimate] || 5} points)\n`;
              body += `- **Risk**: ${slice.risk}\n`;
              body += `- **Database Migrations**: ${slice.db_migrations ? 'Yes' : 'No'}\n`;
              
              if (slice.flags && slice.flags.length > 0) {
                body += `- **Feature Flags**: ${slice.flags.map(f => `\`${f}\``).join(', ')}\n`;
              }
              
              body += `\n---\n_Generated from intent issue #${scope.source_issue}_`;
              
              // Determine labels based on available data
              const labels = ['vertical-slice', 'status:backlog'];
              const points = estimateToPoints[slice.estimate] || 5;
              labels.push(`points:${points}`);
              
              if (slice.risk) {
                labels.push(`risk:${slice.risk.toLowerCase()}`);
              }
              
              // Create the issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: slice.title,
                body: body,
                labels: labels
              });
              
              issues.push(issue.data);
              console.log(`Created issue #${issue.data.number}: ${slice.title}`);
            }
            
            // Calculate total points
            const totalPoints = scope.slices.reduce((sum, slice) => {
              return sum + (estimateToPoints[slice.estimate] || 5);
            }, 0);
            
            // Create meta issue linking all slices
            const metaBody = `## Scope Implementation Tracking\n\n**Source Intent**: Issue #${scope.source_issue}\n**Total Points**: ${totalPoints}\n**Number of Slices**: ${scope.slices.length}\n\n### Vertical Slices\n${issues.map(i => `- [ ] #${i.number} - ${i.title}`).join('\n')}\n\n### Timeline\n- Start: ${new Date().toISOString().split('T')[0]}\n- Estimated Duration: ${Math.ceil(totalPoints / 5)} weeks (at 5 points/week velocity)\n\n### Risk Summary\n${scope.slices.filter(s => s.risk === 'High').length > 0 ? `- **High Risk Items**: ${scope.slices.filter(s => s.risk === 'High').map(s => s.title).join(', ')}\n` : ''}${scope.slices.filter(s => s.risk === 'Medium').length > 0 ? `- **Medium Risk Items**: ${scope.slices.filter(s => s.risk === 'Medium').map(s => s.title).join(', ')}\n` : ''}\n---\n_This issue tracks the implementation of all vertical slices for this scope._`;
            
            const metaIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[META] Implementation Tracking for Issue #${scope.source_issue}`,
              body: metaBody,
              labels: ['meta', 'scope-tracking']
            });
            
            console.log(`Created meta issue #${metaIssue.data.number}`);
            
            // Try to update the GitHub Project (if exists)
            try {
              const projectsResponse = await github.rest.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              if (projectsResponse.data.length > 0) {
                const project = projectsResponse.data[0];
                
                // Get project columns
                const columnsResponse = await github.rest.projects.listColumns({
                  project_id: project.id
                });
                
                const backlogColumn = columnsResponse.data.find(c => c.name === 'Backlog' || c.name === 'Todo');
                
                if (backlogColumn) {
                  // Add all issues to project backlog
                  for (const issue of [...issues, metaIssue.data]) {
                    await github.rest.projects.createCard({
                      column_id: backlogColumn.id,
                      content_id: issue.id,
                      content_type: 'Issue'
                    });
                  }
                  console.log('Added issues to project board');
                }
              }
            } catch (error) {
              console.log('Could not update project board:', error.message);
            }
            
            // Comment on original intent issue
            if (scope.source_issue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: scope.source_issue,
                body: `âœ… **Scope Accepted and Issues Created!**\n\nCreated ${issues.length} vertical slice issues:\n${issues.map(i => `- #${i.number} - ${i.title}`).join('\n')}\n\nðŸ“Š **Tracking Meta Issue**: #${metaIssue.data.number}\n\nðŸš€ The implementation can now begin! Start with the issues that have no dependencies.`
              });
            }
            
            // Output summary
            core.summary
              .addHeading('Scope Creation Complete')
              .addTable([
                [{data: 'Issue', header: true}, {data: 'Title', header: true}, {data: 'Points', header: true}],
                ...issues.map(i => {
                  const pointsLabel = i.labels.find(l => typeof l === 'object' ? l.name.startsWith('points:') : l.startsWith('points:'));
                  const points = pointsLabel ? (typeof pointsLabel === 'object' ? pointsLabel.name.split(':')[1] : pointsLabel.split(':')[1]) : '?';
                  return [
                    `#${i.number}`,
                    i.title,
                    points
                  ];
                })
              ])
              .addHeading('Summary', 2)
              .addRaw(`Total Issues Created: ${issues.length + 1} (${issues.length} slices + 1 meta issue)\n`)
              .addRaw(`Total Story Points: ${totalPoints}\n`)
              .addRaw(`Estimated Duration: ${Math.ceil(totalPoints / 5)} weeks\n`)
              .write();